version: '3.8'

services:
  # FastAPI Backend
  visual_search_api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: visual_search_api
    ports:
      - "8001:8000"
    volumes:
      - ./data:/app/data
      - ./data/models:/app/models
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DEVICE=cpu  # Set to cuda if GPU available in container
      - COLLECTION_NAME=fashion_images
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - visual_search_network

  # Streamlit Frontend
  visual_search_frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: visual_search_frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://visual_search_api:8000
    depends_on:
      visual_search_api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - visual_search_network

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: visual_search_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - visual_search_api
      - visual_search_frontend
    restart: unless-stopped
    networks:
      - visual_search_network
    profiles:
      - production

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: visual_search_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - visual_search_network
    profiles:
      - monitoring

  # Optional: Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: visual_search_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - visual_search_network
    profiles:
      - monitoring

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  visual_search_network:
    driver: bridge
    name: visual_search_network
